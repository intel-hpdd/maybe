// @flow

//
// INTEL CONFIDENTIAL
//
// Copyright 2013-2017 Intel Corporation All Rights Reserved.
//
// The source code contained or described herein and all documents related
// to the source code ("Material") are owned by Intel Corporation or its
// suppliers or licensors. Title to the Material remains with Intel Corporation
// or its suppliers and licensors. The Material contains trade secrets and
// proprietary and confidential information of Intel or its suppliers and
// licensors. The Material is protected by worldwide copyright and trade secret
// laws and treaty provisions. No part of the Material may be used, copied,
// reproduced, modified, published, uploaded, posted, transmitted, distributed,
// or disclosed in any way without Intel's prior express written permission.
//
// No license under any patent, copyright, trade secret or other intellectual
// property right is granted to or conferred upon you by disclosure or delivery
// of the Materials, either expressly, by implication, inducement, estoppel or
// otherwise. Any license under such intellectual property rights must be
// express and approved by Intel in writing.

import type { Fn1 } from '@iml/fp';

declare export class Maybe<A> { value: ?A }

declare export var Nothing: Maybe<any>;

declare export function of<A>(a: ?A): Maybe<A>;
declare export function from<A>(mA: Maybe<A>): ?A;

declare export function withDefault<A>(
  defaultFn: () => A,
  ...rest: void[]
): Fn1<Maybe<A>, A>;
declare export function withDefault<A>(
  defaultFn: () => A,
  mA: Maybe<A>
): A;

type caseT<A, B> = {| Just(a: A): B, Nothing(): B |};

declare export function matchWith<A, B>(
  case: caseT<A, B>,
  ...rest: empty[]
): Fn1<Maybe<A>, B>;
declare export function matchWith<A, B>(
  case: caseT<A, B>,
  ma: Maybe<A>
): B;

declare export function map<A, B>(
  fn: Fn1<A, B>,
  xs: Maybe<A>,
  ...rest: Array<void>
): Maybe<B>;
declare export function map<A, B>(
  fn: Fn1<A, B>,
  ...rest: Array<void>
): Fn1<Maybe<A>, Maybe<B>>;
